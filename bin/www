#!/usr/bin/env node

const dotenv = require('dotenv');
dotenv.config();

/**
 * Module dependencies.
 */
const debug = require("debug")("admin-feature:server");
const http = require("http");
const mongoose = require("mongoose");

async function startServer() {
  try {
    const app = await require("../src/app");
    
    /**
     * Get port from environment and store in Express.
     */
    const port = normalizePort(process.env.PORT || "8080");
    app.set("port", port);

    /**
     * Create HTTP server.
     */
    const server = http.createServer(app);

    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port);
    server.on("error", onError(port));
    server.on("listening", onListening(server));

    console.info(`Server started on port ${port}`);

    // Return server instance for graceful shutdown
    return server;
  } catch (error) {
    console.error("Failed to start server:", error);
    process.exit(1);
  }
}

const serverInstance = startServer();

/**
 * Normalize a port into a number, string, or false.
 *
 * @param {string} val - The port value from environment or default.
 * @returns {number|string|false} - Returns normalized port or false if invalid.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // Named pipe
    return val;
  }

  if (port >= 0) {
    // Port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 *
 * @param {number|string} port - The port number or pipe name
 */
function onError(port) {
  return function(error) {
    if (error.syscall !== "listen") {
      throw error;
    }

    const bind = typeof port === "string" ? `Pipe ${port}` : `Port ${port}`;

    // Handle specific listen errors with friendly messages
    switch (error.code) {
      case "EACCES":
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
      case "EADDRINUSE":
        console.error(`${bind} is already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  };
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening(server) {
  return function() {
    const addr = server.address();
    const bind = typeof addr === "string" ? `pipe ${addr}` : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
    console.info(`Listening on ${bind}`);
  };
}

/**
 * Handle uncaught exceptions and unhandled rejections.
 */
process.on("uncaughtException", (err) => {
  console.error("Uncaught Exception:", err);
  process.exit(1);
});

process.on("unhandledRejection", (reason, promise) => {
  console.error("Unhandled Rejection at:", promise, "reason:", reason);
  process.exit(1);
});

/**
 * Graceful shutdown on process termination.
 */
process.on("SIGINT", async () => {
  console.info("Received SIGINT. Shutting down gracefully...");
  const server = await serverInstance;
  server.close(() => {
    console.info("Server closed.");
    process.exit(0);
  });
});
