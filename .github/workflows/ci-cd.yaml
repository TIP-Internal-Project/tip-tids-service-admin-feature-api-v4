name: CI/CD Pipeline
run-name: "Build and Deploy ${{ github.ref_name }}"

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "testing"
        type: choice
        options:
          - testing
          - production

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    env:
      SERVICE_NAME: engagement-app-api-v4
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      REGION: ${{ secrets.GCP_REGION }}
      CI: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Tag the release
        id: tagging
        uses: mathieudutour/github-tag-action@v6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ inputs.environment == 'production' }}

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-

      - name: Clean install dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install
          npm install --package-lock-only
          npm ci

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker northamerica-northeast1-docker.pkg.dev

      - name: Set environment variables for PRODUCTION
        if: github.event.inputs.environment == 'production'
        run: |
          echo "REACT_APP_ENV=production" >> $GITHUB_ENV
          gcloud secrets versions access latest --secret=ENGAGEMENT_APP_KEY_JSON > engagementAppKey.json
          ENGAGEMENT_APP_KEY_JSON=$(cat engagementAppKey.json | base64 -w0)
          echo "ENGAGEMENT_APP_KEY_JSON=$ENGAGEMENT_APP_KEY_JSON" >> $GITHUB_ENV
          gcloud secrets versions access latest --secret=ENGAGEMENT_APP_CREDS_PR_V4 > creds.json
          CREDS_JSON=$(cat creds.json | base64 -w0)
          echo "CREDS_JSON=$CREDS_JSON" >> $GITHUB_ENV

      - name: Set environment variables for TESTING
        if: github.event.inputs.environment == 'testing'
        run: |
          echo "REACT_APP_ENV=testing" >> $GITHUB_ENV
          gcloud secrets versions access latest --secret=ENGAGEMENT_APP_KEY_JSON > engagementAppKey.json
          ENGAGEMENT_APP_KEY_JSON=$(cat engagementAppKey.json | base64 -w0)
          echo "ENGAGEMENT_APP_KEY_JSON=$ENGAGEMENT_APP_KEY_JSON" >> $GITHUB_ENV
          gcloud secrets versions access latest --secret=ENGAGEMENT_APP_CREDS_QA_V4 > creds.json
          CREDS_JSON=$(cat creds.json | base64 -w0)
          echo "CREDS_JSON=$CREDS_JSON" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          IMAGE_TAG=northamerica-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-run-source-deploy/$REACT_APP_ENV-$SERVICE_NAME:${{ github.sha }}
          docker build --build-arg NODE_ENV=${{ github.event.inputs.environment }} \
                       --build-arg CREDS_JSON=${{ env.CREDS_JSON }} \
                       --build-arg ENGAGEMENT_APP_KEY_JSON=${{ env.ENGAGEMENT_APP_KEY_JSON }} \
                       -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy $REACT_APP_ENV-$SERVICE_NAME \
            --image northamerica-northeast1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/cloud-run-source-deploy/$REACT_APP_ENV-$SERVICE_NAME:${{ github.sha }} \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --service-account ${{ secrets.SERVICE_ACCOUNT }}

      - name: Notify team on Google Chat
        if: always()
        env:
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
        run: |
          # Define variables
          APPLICATION_NAME="Engagement App API V4" # Replace with your application name
          ENVIRONMENT="${{ github.event.inputs.environment }}"
          BRANCH="${{ github.ref_name }}"
          DEPLOYER="${{ github.actor }}"
          STATUS="${{ job.status }}"

          # Create the JSON payload
          PAYLOAD=$(cat <<EOF
          {
            "cards": [
              {
                "header": {
                  "title": "Deployment Notification",
                  "subtitle": "${ENVIRONMENT} Environment"
                },
                "sections": [
                  {
                    "widgets": [
                      {
                        "keyValue": {
                          "topLabel": "Application",
                          "content": "${APPLICATION_NAME}"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Environment",
                          "content": "${ENVIRONMENT}"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Branch",
                          "content": "${BRANCH}"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Deployed By",
                          "content": "${DEPLOYER}"
                        }
                      },
                      {
                        "keyValue": {
                          "topLabel": "Status",
                          "content": "${STATUS}"
                        }
                      }
                    ]
                  }
                ]
              }
            ]
          }
          EOF
          )

          # Send the notification to Google Chat
          curl -X POST -H 'Content-Type: application/json' \
               --data "${PAYLOAD}" $GOOGLE_CHAT_WEBHOOK_URL
